#!/usr/bin/env python

"""Vidzi.tv Service Code"""

from unpacker import unpack as Unpack

####################################################################################################
def NormalizeURL(url):

    if '/embed-' in url:
        url = url.replace('/embed-', '/')
        url = url.split('-')[0]

    return url

####################################################################################################
def MetadataObjectForURL(url):

    # Trick to use the bundled Vidzi URL Service
    url = url.replace('vidzi://', 'http://')

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    if len(html.xpath('//*[contains(., "deleted")]')) > 0:
        raise Ex.MediaNotAvailable

    title = html.xpath('//h2[@class="video-title"]/text()')

    if len(title) < 1:
        raise Ex.MediaNotAvailable

    title = title[0].strip()
    thumb = html.xpath('//span[@id="vplayer"]/img/@src')[0]

    return VideoClipObject(
        title=title,
        thumb=thumb,
        source_title=get_source_title(url)
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

    # Trick to use the bundled Vidzi ULR Service
    url = url.replace('vidzi://', 'http://')

    page = HTTP.Request(url).content
    packed = Regex("<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:file).+\.split\('\|'\)\)\))").search(page)
    if packed:
        data = Unpack(packed.group(1))
        vurl = Regex(r'(?:\"|\')?file(?:\"|\')?(?:\s)?\:(?:\s)?(?:\"|\')(http[^\"\']+(?<!m3u8|smil))(?:\"|\')').search(data)
        if vurl:
            Log.Debug('* PlayVideo URL = %s' %vurl.group(1))
            return IndirectResponse(VideoClipObject, key=vurl.group(1))

    raise Ex.MediaNotAvailable

####################################################################################################
def get_source_title(url):
    """get source title from url"""

    stitle = url.split('/')[2]
    sltitle = stitle.split('.')
    if len(sltitle) > 2:
        return sltitle[1].title()+'.'+sltitle[2]
    else:
        return sltitle[0].title()+'.'+sltitle[1]
