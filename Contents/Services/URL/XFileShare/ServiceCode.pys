#!/usr/bin/env python

"""
Service Code for:
    DaClips, FileHoot, GorillaVid, MovPod, PowerWatch
    Rapidvideo, TheVideoBee, Streamin, Vidtodo, AllMyVideos

Decided to sepearte out Vidto, because it host multiple resolutions
"""

from unpacker import unpack as Unpack

####################################################################################################
def NormalizeURL(url):

    r = get_embed_url(url, norm=True)
    return r.group(1) + r.group(2)

####################################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    title = html.xpath('//input[@name="fname"]/@value')
    if not title:
        raise Ex.MediaExpired

    tpage = HTTP.Request(get_embed_url(url)).content
    packed = get_packed_data(tpage)
    if packed:
        tpage = Unpack(packed.group(1))

    rt = Regex(r'(?:\"|\')?image(?:\"|\')?\:(?:\s)?(?:\"|\')([^\"\']+)(?:\"|\')').search(tpage)
    rd = Regex(r'(?:\"|\')?duration(?:\"|\')?(?:\s)?\:(?:\s)?(?:\"|\')(\d+)(?:\"|\')').search(tpage)
    thumb = 'http://i.imgur.com/75YO83o.jpg'
    fallback = thumb
    duration = None
    if rt:
        thumb = rt.group(1)
    if rd:
        duration = int(rd.group(1)) * 1000

    return VideoClipObject(
        title=title[0].strip(),
        thumb=Resource.ContentsOfURLWithFallback(thumb, fallback),
        duration=duration,
        source_title=get_source_title(url)
        )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        MediaObject(
            video_resolution='sd',
            audio_channels=2,
            optimized_for_streaming=False,
            parts=[
                PartObject(key=Callback(PlayVideo, url=url))
                ]
            )
        ]

####################################################################################################
@indirect
def PlayVideo(url):

    url = get_embed_url(url)
    page = HTTP.Request(url).content
    packed = get_packed_data(page)
    if packed:
        page = Unpack(packed.group(1))

    r = Regex(r'(?:\"|\')?file(?:\"|\')?(?:\s)?\:(?:\s)?(?:\"|\')(http[^\"\']+(?<!m3u8|smil))(?:\"|\')').search(page)

    if r:
        Log.Debug('* PlayVideo URL = \"%s\"' %r.group(1))
        return IndirectResponse(VideoClipObject, key=r.group(1))

    raise Ex.MediaNotAvailable

####################################################################################################
def get_packed_data(page):
    return Regex(r"<script type=.text\/javascript.>(eval\(function\(p,a,c,k,e,.+(?:file).+\.split\('\|'\)\)\))").search(page)

####################################################################################################
def get_embed_url(url, norm=False):
    r = Regex(r'(https?\:\/\/(?:www\.)?\w+\.(?:[^/]+\/)?)(?:.*?[/])?([^\/\.]+)').search(url)
    if norm:
        return r
    else:
        return r.group(1) + 'embed-' + r.group(2) + '.html'

####################################################################################################
def get_source_title(url):
    """get source title from url"""

    stitle = url.split('/')[2]
    sltitle = stitle.split('.')
    if len(sltitle) > 2:
        return sltitle[1].title()+'.'+sltitle[2]
    else:
        return sltitle[0].title()+'.'+sltitle[1]
